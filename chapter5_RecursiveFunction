# 실습 5-1: 양의 정수 n의 팩토리얼 구하기
def factorial(n: int) -> int:
  if n > 0:
    return n * factorial(n-1)
  else:
    return 1

# 이하 실행창
if __name__ == "__main__":
  n = int(input('출력할 팩토리얼값을 입력하세요.: '))
  print(f'{n}의 팩토리얼은 {factorial(n)}입니다.')

# 유클리드 호제법으로 최대공약수 구하기
def gcd(x: int, y: int) -> int:
  if y == 0:
    return x
  else:
    return gcd(y, x % y)

# 이하 실행창
if __name__ == "__main__":
  print('두 정숫값의 최대 공약수를 구합니다.')
  x = int(input('첫 번째 정숫값을 입력하세요.: '))
  y = int(input('두 번째 정숫값을 입력하세요.: '))

  print(f'두 정숫값의 최대 공약수는 {gcd(x,y)}입니다.')
# 실습 5-3: 순수한 재귀 함수 구현하기
def recur(n: int) -> int:
  if n > 0:
    recur(n-1)
    print(n)
    recur(n-2)

x = int(input('정숫값을 입력하세요.: '))
recur(x)
# 실습 5-4: 비재귀적으로 재귀 함수 구현하기(꼬리 재귀를 제거)
def recur(n: int) -> int:
  while n > 0:
    recur(n-1)
    print(n)
    n = n-2
# 실습 5-5: 스택으로 재귀 함수 구현하기(재귀를 제거)
def recur(n: int) -> int:
  s = FixedStack(n)

  while True:
    if n > 0:
      s.push(n)
      n = n - 1
      continue
    if not s.is_empty():
      n = s.pop()
      print(n)
      n = n - 2
      continue
    break

x = int(input('정숫값을 입력하세요.: '))

recur(x)

# 실습 5-6: 하노이의 탑 구현하기
def move(no: int, x: int, y: int) -> None:
  if no >1:
    move(no - 1, x, 6 - x - y)

    print(f'원반 [{no}]을(를) {x}기둥에서 {y} 기둥으로 옮깁니다.')

    if no > 1:
      move(no - 1, 6 - x - y, y)

print('하노이의 탑을 구현합니다.')
n = int(input('원반의 개수를 입력하세요.: '))
move(n, 1, 3) # 1 기둥에 쌓인 원반 n개를 3기둥으로 옮김.

# 실습 5-8: 행과 열에 퀸을 1개 배치하는 조합을 재귀적으로 나열하기
pos = [0] * 8 # 각 열에서 퀸의 위치
flag = [False] * 8

def put() -> None:
  for i in range(8):
    print(f'{pos[i]:2}', end = '')
    print()

def set(i:int) -> None:
  for j in range(8):
    if not flag[j]:
      pos[i] = j
      if i == 7:
        put()
      else:
        flag[j] = True:
        set(i + 1)
        flag[j] = False
# 실습 5-9: 8퀸 문제 알고리즘 구현하기
pos = [0] * 8 # 각 열에 배치한 퀸의 위치
flag_a = [False] * 8 # 각 행에 퀸을 배치했는지 체크
flag_b = [False] * 15 # 대각선 방향으로 퀸을 배치했는지 체크
flag_c = [False] * 15 # 대각선 방향으로 퀸을 배치했는지 체크

def put() -> None:
  for j in range(8):
    for i in range(8):
      print('♥' if pos[i] == j else '♡', end ='')
    print()
  print()
def set(i: int) -> None:
  for j in range(8):
    if(    not flag_a[j]
       and not flag_b[i+j]
       and not flag_c[i-j + 7]):
      pos[i] = j
      if i == 7:
        put()
      else:
        flag_a[j] = flag_b[i + j] = flag_c[i - j + 7] = True
        set(i + 1)
        flag_a[j] = flag_b[i + j] = flag_c[i - j + 7] = False
set(0)
